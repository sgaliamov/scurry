<#@ template debug="false" hostspecific="false" language="C#" compilerOptions="optimize+" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="$(ProjectDir)..\SCurry.Builders\bin\$(Configuration)\netstandard2.0\SCurry.Builders.dll" #>
<#@ import namespace="SCurry.Builders.Shared" #>
<#@ import namespace="System.Linq" #>
/*
   ___ ___ _  _ ___ ___    _ _____ ___ ___     ___ ___  ___  ___ 
  / __| __| \| | __| _ \  /_\_   _| __|   \   / __/ _ \|   \| __|
 | (_ | _|| .` | _||   / / _ \| | | _|| |) | | (_| (_) | |) | _| 
  \___|___|_|\_|___|_|_\/_/ \_\_| |___|___/   \___\___/|___/|___|

*/

using System;
using Xunit;

namespace SCurry.Tests
{
    [Trait("Category", "Curry")]
    public class CurryActionsTests
    {
        [Fact]
        public void Curry_Action_0()
        {
            // arrange
            var actual = -1;
            Action action = () =>
            {
                actual = TestFunctions.Zero();
            };

            // act
            var curried = action.Curry();
            curried();

            // assert
            Assert.Equal(0, actual);
        }
<#
    for(int cnt = 1; cnt <= Constants.MaxInputArgumentsCount; cnt++) 
    { 
        int cnt1 = cnt;
        int cnt2 = cnt;
        int cnt3 = cnt;
        int cnt4 = cnt;
        int cnt5 = cnt;
        int cnt6 = cnt;
        int cnt7 = cnt;
        int cnt8 = cnt;
#>

        [Fact]
        public void Curry_Action_<#=cnt1.ToString()#>()
        {
            // arrange
            var actual = -1;
            <#= ActionType(cnt2) #> action = (<#= ActionArgs(cnt3) #>) =>
            {
                actual = TestFunctions.Add<#=cnt4#>(<#= ActionArgs(cnt5) #>);
            };

            // act
            var curried = action.Curry();
            curried<#= Calls(cnt6) #>;

            // assert
            Assert.Equal(<#= cnt7 * (cnt8 + 1) / 2.0 #>, actual);
        }
<# } #>
    }
}
<#+
    string ActionArgs(int count)
    {
        return string.Join(
            ", ",
            Enumerable.Range(1, count).Select(x => $"arg{x}")
        );
    }

    string ActionType(int count)
    {
        var types = string.Join(
            ", ",
            Enumerable.Range(1, count).Select(x => "int")
        );

        return $"Action<{types}>";
    }

    string Calls(int count)
    {
        return string.Join(
            string.Empty,
            Enumerable.Range(1, count).Select(x => $"({x})")
        );
    }
#>