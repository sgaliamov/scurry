<#@ template debug="false" hostspecific="false" language="C#" compilerOptions="optimize+" #>
<#@ output extension=".generated.cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ import namespace="System.Linq" #>
/*
   ___ ___ _  _ ___ ___    _ _____ ___ ___     ___ ___  ___  ___ 
  / __| __| \| | __| _ \  /_\_   _| __|   \   / __/ _ \|   \| __|
 | (_ | _|| .` | _||   / / _ \| | | _|| |) | | (_| (_) | |) | _| 
  \___|___|_|\_|___|_|_\/_/ \_\_| |___|___/   \___\___/|___/|___|

*/

using Xunit; 

namespace SCurry.Tests
{
    [Trait("Category", "Curry")]
    public class CurryFunctionsTests
    {
        [Fact]
        public void Curry_Func_0_Test()
        {
            var curryed = TestFunctions.Zero.Curry();

            var actual = curryed();

            Assert.Equal(0, actual);
        }
<# for(int count = 1; count <= MaxInputArgumentsCount; count++) #>
<# { #>

        [Fact]
        public void Curry_Func_<#= count #>_Test()
        {
            var curryedAdd = TestFunctions.Add<#= count #>.Curry();

            var actual = curryedAdd<#= Calls(count) #>;

            Assert.Equal(<#= count * (count + 1) / 2.0 #>, actual);
        }
<#    } #>
    }
}
<#+
    const int MaxInputArgumentsCount = 16;

    string Calls(int count)
    {
        return string.Join(string.Empty, Enumerable.Range(1, count).Select(x => $"({x})"));
    }
#>