<#@ template debug="false" hostspecific="false" language="C#" compilerOptions="optimize+" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="$(TargetDir)SCurry.Builders.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="SCurry.Builders" #>
/*
   ___ ___ _  _ ___ ___    _ _____ ___ ___     ___ ___  ___  ___ 
  / __| __| \| | __| _ \  /_\_   _| __|   \   / __/ _ \|   \| __|
 | (_ | _|| .` | _||   / / _ \| | | _|| |) | | (_| (_) | |) | _| 
  \___|___|_|\_|___|_|_\/_/ \_\_| |___|___/   \___\___/|___/|___|

*/
using System;

namespace SCurry.Tests
{      
    public static class TestFunctions
    {
        public static readonly Func<int> Zero = () => 0;
        public static readonly Func<int, int> Id = (int i) => i;
<#    
    for(int i = 2; i <= CurryBuilder.MaxInputArgumentsCount; i++) 
    { 
#>
        <#= Generate(i) #>
<#
    } 
#>
    }
}
<#+    
    string Generate(int count)
    {
        var args = string.Join(", ",
            Enumerable.Range(1, count).Select(x => "int arg" + x));

        var types = string.Join(", ",
            Enumerable.Range(0, count).Select(_ => "int").Append("int"));

        var body = string.Join(" + ",
            Enumerable.Range(1, count).Select(x => "arg" + x));

        return $"public static readonly Func<{types}> Add{count} = ({args}) => {body};";
    }
#>