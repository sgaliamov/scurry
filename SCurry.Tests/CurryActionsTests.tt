<#@ template debug="false" hostspecific="false" language="C#" compilerOptions="optimize+" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ import namespace="System.Linq" #>
/*
   ___ ___ _  _ ___ ___    _ _____ ___ ___     ___ ___  ___  ___ 
  / __| __| \| | __| _ \  /_\_   _| __|   \   / __/ _ \|   \| __|
 | (_ | _|| .` | _||   / / _ \| | | _|| |) | | (_| (_) | |) | _| 
  \___|___|_|\_|___|_|_\/_/ \_\_| |___|___/   \___\___/|___/|___|

*/

using System;
using Xunit;

namespace SCurry.Tests
{
    [Trait("Category", "Curry")]
    public class CurryActionsTests
    {
        [Fact]
        public void Curry_Action_0_Test()
        {
            // arrange
            var actual = -1;
            Action action = () =>
            {
                actual = TestFunctions.Zero();
            };

            // act
            var curryed = action.Curry();
            curryed();

            // assert
            Assert.Equal(0, actual);
        }
<# for(int count = 1; count <= MaxInputArgumentsCount; count++) #>
<# { #>

        [Fact]
        public void Curry_Action_<#= count #>_Test()
        {
            // arrange
            var actual = -1;
            <#= ActionType(count) #> action = (<#= ActionArgs(count) #>) => 
            {
                actual = TestFunctions.Add<#= count #>(<#= ActionArgs(count) #>);
            };

            // act
            var curryed = action.Curry();
            curryed<#= Calls(count) #>;

            // assert
            Assert.Equal(<#= count * (count + 1) / 2.0 #>, actual);
        }
<#    } #>
    }
}
<#+
    const int MaxInputArgumentsCount = 16;

    string ActionArgs(int count)
    {
        return string.Join(
            ", ",
            Enumerable.Range(1, count).Select(x => $"arg{x}")
        );
    }

    string ActionType(int count)
    {
        var types = string.Join(
            ", ",
            Enumerable.Range(1, count).Select(x => "int")
        );

        return $"Action<{types}>";
    }

    string Calls(int count)
    {
        return string.Join(
            string.Empty,
            Enumerable.Range(1, count).Select(x => $"({x})")
        );
    }
#>