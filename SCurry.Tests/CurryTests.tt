<#@ template debug="false" hostspecific="false" language="C#" compilerOptions="optimize+" #>
<#@ assembly name="netstandard" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Linq" #>
<#@ assembly name="$(TargetDir)SCurry.Builders.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="SCurry.Builders" #>
/*
   ___ ___ _  _ ___ ___    _ _____ ___ ___     ___ ___  ___  ___ 
  / __| __| \| | __| _ \  /_\_   _| __|   \   / __/ _ \|   \| __|
 | (_ | _|| .` | _||   / / _ \| | | _|| |) | | (_| (_) | |) | _| 
  \___|___|_|\_|___|_|_\/_/ \_\_| |___|___/   \___\___/|___/|___|

*/

using Xunit; 

namespace SCurry.Tests
{
    public class CurryTests
    {
        [Fact]
        public void Curry1_Test()
        {
            var curryed = TestFunctions.Id.Curry();

            var actual = curryed(1);

            Assert.Equal(1, actual);
        }

<# for(ushort count = 2; count <= CurryBuilder.MaxInputArgumentsCount; count++) #>
<# { #>
        [Fact]
        public void Curry<#= count #>_Test()
        {
            var curryedAdd = TestFunctions.Add<#= count #>.Curry();

            var actual = curryedAdd<#= Calls(count) #>;

            Assert.Equal(<#= count * (count + 1) / 2.0 #>, actual);
        }

<#    } #>
        [Fact]
        public void Curry0_Test()
        {
            var curryed = TestFunctions.Zero.Curry();

            var actual = curryed();

            Assert.Equal(0, actual);
        }
    }
}
<#+
    string Calls(ushort count)
    {
        return string.Join(string.Empty, CurryBuilder.ShortRange(1, count).Select(x => $"({x})"));
    }
#>